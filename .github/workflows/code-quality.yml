name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: |
        bun install --frozen-lockfile
        bun add -g rimraf
    
    - name: Check TypeScript compilation
      run: bun run typecheck
    
    - name: Build project
      run: bun run build
    
    # Add ESLint check if .eslintrc exists
    - name: Check for ESLint config
      id: eslint-check
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc.yml" ] || [ -f ".eslintrc.yaml" ] || [ -f "eslint.config.js" ]; then
          echo "eslint-exists=true" >> $GITHUB_OUTPUT
        else
          echo "eslint-exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run ESLint
      if: steps.eslint-check.outputs.eslint-exists == 'true'
      run: bunx eslint . --ext .ts,.js,.tsx,.jsx --max-warnings 0
    
    # Add Prettier check if .prettierrc exists
    - name: Check for Prettier config
      id: prettier-check
      run: |
        if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f ".prettierrc.yml" ] || [ -f ".prettierrc.yaml" ] || [ -f ".prettierrc.js" ] || [ -f "prettier.config.js" ]; then
          echo "prettier-exists=true" >> $GITHUB_OUTPUT
        else
          echo "prettier-exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check Prettier formatting
      if: steps.prettier-check.outputs.prettier-exists == 'true'
      run: bunx prettier --check .
    
    - name: Check for unused dependencies
      run: |
        # Install depcheck to find unused dependencies
        bun add -g depcheck
        bunx depcheck --ignores="@types/*,typescript,@vitejs/*" || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Run bun audit
      run: |
        echo "Running bun audit..."
        bun audit
        
        echo "\nGenerating audit report..."
        bun audit --json > audit-report.json || true
    
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: audit-report.json
        retention-days: 30
    
    # CodeQL Analysis for JavaScript/TypeScript
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: Build for CodeQL
      run: bun run build
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
    
    # Semgrep security scanning
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Install license checker
      run: bun add -g license-checker
    
    - name: Check licenses
      run: |
        echo "Checking package licenses..."
        bunx license-checker --summary
        
        echo "\nDetailed license report:"
        bunx license-checker --json > licenses.json
        
        echo "\nChecking for problematic licenses..."
        bunx license-checker --failOn 'GPL;AGPL;LGPL;CPAL;OSL;EPL;MPL' --summary || {
          echo "⚠️  Found potentially problematic licenses. Please review."
          exit 1
        }
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Build project
      run: bun run build
    
    - name: Analyze bundle size
      run: |
        echo "Analyzing bundle sizes..."
        
        # Check main bundle size
        if [ -f "dist/index.js" ]; then
          MAIN_SIZE=$(wc -c < dist/index.js)
          echo "Main bundle size: $MAIN_SIZE bytes"
          
          # Warn if bundle is too large (>100KB)
          if [ $MAIN_SIZE -gt 102400 ]; then
            echo "⚠️  Warning: Main bundle size exceeds 100KB"
          fi
        fi
        
        # Check CLI bundle size
        if [ -f "dist/cli.js" ]; then
          CLI_SIZE=$(wc -c < dist/cli.js)
          echo "CLI bundle size: $CLI_SIZE bytes"
        fi
        
        # List all files in dist
        echo "\nAll built files:"
        find dist -type f -exec ls -lh {} \; | awk '{print $5, $9}'
    
    - name: Check for source maps
      run: |
        echo "Checking for source maps..."
        find dist -name "*.map" -type f || echo "No source maps found"

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README
      run: |
        if [ ! -f "README.md" ]; then
          echo "❌ README.md is missing"
          exit 1
        fi
        
        # Check README length
        README_LINES=$(wc -l < README.md)
        if [ $README_LINES -lt 10 ]; then
          echo "⚠️  README.md seems too short ($README_LINES lines)"
        fi
        
        echo "✅ README.md exists and has $README_LINES lines"
    
    - name: Check package.json completeness
      run: |
        echo "Checking package.json completeness..."
        
        # Check required fields
        bun -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'types', 'repository', 'license'];
          const missing = required.filter(field => !pkg[field]);
          
          if (missing.length > 0) {
            console.log('❌ Missing required fields in package.json:', missing.join(', '));
            process.exit(1);
          }
          
          console.log('✅ All required package.json fields are present');
        "
    
    - name: Check TypeScript declarations
      run: |
        if [ -f "dist/index.d.ts" ]; then
          echo "✅ TypeScript declarations found"
        else
          echo "⚠️  TypeScript declarations not found in dist/"
        fi